'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _cheerio = require('cheerio');

var _cheerio2 = _interopRequireDefault(_cheerio);

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HLTV_URL = 'http://www.hltv.org';

var ParsingTools = function () {
    function ParsingTools() {
        (0, _classCallCheck3.default)(this, ParsingTools);
    }

    (0, _createClass3.default)(ParsingTools, [{
        key: '_cleanupString',
        value: function _cleanupString(str) {
            if (str.includes('[emailÂ protected]')) {
                console.warn('Cannot parse element because of HLTV obfuscation');
            } else {
                return str.replace(/\s\s+/g, ' ').trim();
            }
        }
    }, {
        key: '_getTeamId',
        value: function _getTeamId($team) {
            var teamLink = $team.attr('href');

            if (teamLink && teamLink !== '#') return parseInt(teamLink.split('=')[2]);
        }
    }, {
        key: '_getTeamIdByLogo',
        value: function _getTeamIdByLogo($team) {
            var teamLinkLogo = $team.attr('src');

            if (teamLinkLogo && teamLinkLogo !== '#') return parseInt(teamLinkLogo.replace('https://static.hltv.org/images/team/logo/', ''));
        }
    }, {
        key: '_getEventIdByLogo',
        value: function _getEventIdByLogo($event) {
            var eventLogo = $event.attr('src');

            if (eventLogo && eventLogo !== '#') return parseInt(eventLogo.replace('https://static.hltv.org/images/eventLogos/', '').replace('.png', ''));
        }
    }, {
        key: '_parseMatchPageMaps',
        value: function _parseMatchPageMaps($, $maps, $results) {
            var _this = this;

            var maps = Array.apply(null, Array($maps.length)).map(function (e) {
                return {};
            });

            $maps.each(function (i, map) {
                maps[i].map = $(map).find('img').attr('src').split('maps/')[1].split('.png')[0];
            });

            $results.each(function (i, res) {
                maps[i].result = _this._cleanupString($(res).text());
            });

            return maps;
        }
    }, {
        key: '_parseMatchPageStreams',
        value: function _parseMatchPageStreams($, $streams) {
            var _this2 = this;

            return $streams.map(function (i, e) {
                return {
                    name: _this2._cleanupString($(e).text()),
                    link: HLTV_URL + $(e).find('a').attr('href')
                };
            }).get();
        }
    }, {
        key: '_parseMatchPagePlayer',
        value: function _parseMatchPagePlayer($) {
            var _this3 = this;

            return function (i, e) {
                return _this3._cleanupString($(e).children().first().text());
            };
        }
    }, {
        key: '_restructureMatch',
        value: function _restructureMatch(match) {
            if (['LIVE', 'Finished'].includes(match.time)) {
                delete match.time;
            }

            if (!match.format.includes('bo')) {
                match.map = match.format;
                match.format = 'Best of 1';
            }

            if (match.label) {
                delete match.team1;
                delete match.team1Id;
                delete match.team2;
                delete match.team2Id;
                delete match.live;
                delete match.finished;
                delete match.map;
            } else {
                delete match.label;
            }

            if (!match.team1Id) delete match.team1Id;
            if (!match.team2Id) delete match.team2Id;
        }
    }, {
        key: '_restructureFullMatch',
        value: function _restructureFullMatch(match) {
            if (match.title) {
                delete match.team1;
                delete match.team1Id;
                delete match.team2;
                delete match.team2Id;
                delete match.highlights;
                delete match.players;
            } else {
                delete match.title;
            }
        }
    }, {
        key: '_getPlayerId',
        value: function _getPlayerId(fullIdString) {
            var id = fullIdString.split('playerid=')[1];
            if (!id) {
                id = fullIdString.split('/')[2].split('-')[0];
            }

            return Number(id);
        }
    }]);
    return ParsingTools;
}();

var HLTV = function (_ParsingTools) {
    (0, _inherits3.default)(HLTV, _ParsingTools);

    function HLTV() {
        (0, _classCallCheck3.default)(this, HLTV);
        return (0, _possibleConstructorReturn3.default)(this, (HLTV.__proto__ || (0, _getPrototypeOf2.default)(HLTV)).apply(this, arguments));
    }

    (0, _createClass3.default)(HLTV, [{
        key: 'getMatches',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
                var _this5 = this;

                var matches, response, $, $liveMatches, $upcomingMatches;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                matches = [];
                                _context.next = 3;
                                return (0, _isomorphicFetch2.default)(HLTV_URL + '/matches/').then(function (res) {
                                    return res.text();
                                });

                            case 3:
                                response = _context.sent;
                                $ = _cheerio2.default.load(response);
                                $liveMatches = $('.live-match');
                                $upcomingMatches = $('.upcoming-match.standard-box');


                                $liveMatches.each(function (i, elem) {
                                    var $elem = $(elem);
                                    var teams = [];
                                    $elem.find('.logo').each(function (index) {
                                        teams.push($(this));
                                    });

                                    var $team1 = teams[0];
                                    var $team2 = teams[1];
                                    var match = {};
                                    var event = $elem.find('.event-logo');
                                    if ($team1 != undefined && $team2 != undefined) {
                                        match.time = undefined;
                                        match.team1 = $team1.attr('title');
                                        match.team1Id = _this5._getTeamIdByLogo($team1);
                                        match.team2 = $team2.attr('title');
                                        match.team2Id = _this5._getTeamIdByLogo($team2);
                                        match.format = $elem.find('.bestof').text();
                                        match.label = undefined;
                                        match.id = $elem.find('.scores .table').attr('data-livescore-match');
                                        match.eventId = _this5._getEventIdByLogo(event);
                                        match.live = true;
                                        match.finished = match.time === 'Finished';
                                        match.link = $elem.find("a.a-reset").attr('href');
                                        match.eventName = event.attr('title');
                                        match.date = 'Today';
                                        match.unixtime = 'Now';
                                        _this5._restructureMatch(match);
                                        matches.push((0, _extends3.default)({}, match));
                                    }
                                });

                                $upcomingMatches.each(function (i, elem) {
                                    var $elem = $(elem);
                                    var teams = [];
                                    $elem.find('.team').each(function (index) {
                                        teams.push($(this));
                                    });

                                    var $team1 = teams[0];
                                    var $team2 = teams[1];

                                    var $liveInfo = $($elem.find('.matchScoreCell > div > div'));

                                    var event = $elem.find('.event-logo');

                                    var match = {};

                                    if ($team1 != undefined && $team2 != undefined) {
                                        var halfId = $elem.attr('href').replace('/matches/', '');
                                        var slashIndex = halfId.indexOf('/');
                                        match.time = $elem.find('div.time').text();
                                        match.team1 = $team1.text();
                                        match.team1Id = _this5._getTeamIdByLogo($team1.parent().find('.logo'));
                                        match.team2 = $team2.text();
                                        match.team2Id = _this5._getTeamIdByLogo($team2.parent().find('.logo'));
                                        match.format = $elem.find('.map-text').text();
                                        match.label = undefined;
                                        match.id = halfId.substring(0, slashIndex);
                                        match.eventId = _this5._getEventIdByLogo(event);
                                        match.live = false;
                                        match.finished = false;
                                        match.link = $elem.attr('href');
                                        match.eventName = event.attr('title');
                                        match.date = $elem.parent().find('.standard-headline').text();
                                        match.unixtime = $elem.find('div.time').attr('data-unix');
                                        _this5._restructureMatch(match);
                                        matches.push((0, _extends3.default)({}, match));
                                    } else {
                                        var _halfId = $elem.attr('href').replace('/matches/', '');
                                        var _slashIndex = _halfId.indexOf('/');
                                        match.label = $elem.find('placeholder-text-cell').text();
                                        match.time = $elem.find('div.time').text();
                                        match.format = 'unknown';
                                        match.id = _halfId.substring(0, _slashIndex);
                                        match.date = $elem.parent().find('.standard-headline').text();
                                        match.unixtime = $elem.find('div.time').attr('data-unix');
                                        match.live = false;
                                        match.finished = false;
                                        match.link = $elem.attr('href');
                                        _this5._restructureMatch(match);
                                        matches.push((0, _extends3.default)({}, match));
                                    }
                                });

                                return _context.abrupt('return', matches);

                            case 10:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getMatches() {
                return _ref.apply(this, arguments);
            }

            return getMatches;
        }()
    }, {
        key: 'getLatestResults',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
                var _this6 = this;

                var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                    _ref3$pages = _ref3.pages,
                    pages = _ref3$pages === undefined ? 1 : _ref3$pages;

                var matches, _loop, i;

                return _regenerator2.default.wrap(function _callee2$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                if (!(pages < 1)) {
                                    _context3.next = 2;
                                    break;
                                }

                                throw new Error('HLTV.getLatestResults: pages cannot be less than 1');

                            case 2:
                                matches = [];
                                _loop = _regenerator2.default.mark(function _loop(i) {
                                    var response, $, $matchElems;
                                    return _regenerator2.default.wrap(function _loop$(_context2) {
                                        while (1) {
                                            switch (_context2.prev = _context2.next) {
                                                case 0:
                                                    _context2.next = 2;
                                                    return (0, _isomorphicFetch2.default)(HLTV_URL + '/results?offset=' + i * 100).then(function (res) {
                                                        return res.text();
                                                    });

                                                case 2:
                                                    response = _context2.sent;
                                                    $ = _cheerio2.default.load(response);
                                                    $matchElems = $('.result-con');


                                                    $matchElems.each(function (i, elem) {
                                                        var $elem = $(elem);
                                                        var $team1 = $elem.find('.team1');
                                                        var $team2 = $elem.find('.team2');
                                                        var halfId = $elem.find('a').attr('href').replace('/matches/', '');
                                                        var slashIndex = halfId.indexOf('/');

                                                        var match = {};

                                                        match.format = $elem.find('.map-text').text();
                                                        match.team1 = $team1.text().trim();
                                                        match.team2 = $team2.text().trim();
                                                        match.team1Id = _this6._getTeamIdByLogo($team1.find('.team-logo'));
                                                        match.team2Id = _this6._getTeamIdByLogo($team2.find('.team-logo'));
                                                        match.id = halfId.substring(0, slashIndex);
                                                        match.result = $elem.find('.result-score').text().trim();
                                                        match.unixtime = $elem.attr('data-zonedgrouping-entry-unix');

                                                        _this6._restructureMatch(match);

                                                        matches.push((0, _extends3.default)({}, match));
                                                    });

                                                case 6:
                                                case 'end':
                                                    return _context2.stop();
                                            }
                                        }
                                    }, _loop, _this6);
                                });
                                i = 0;

                            case 5:
                                if (!(i < pages)) {
                                    _context3.next = 10;
                                    break;
                                }

                                return _context3.delegateYield(_loop(i), 't0', 7);

                            case 7:
                                i++;
                                _context3.next = 5;
                                break;

                            case 10:
                                return _context3.abrupt('return', matches);

                            case 11:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function getLatestResults() {
                return _ref2.apply(this, arguments);
            }

            return getLatestResults;
        }()
    }, {
        key: 'getStreams',
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
                var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                    _ref5$loadLinks = _ref5.loadLinks,
                    loadLinks = _ref5$loadLinks === undefined ? false : _ref5$loadLinks;

                var streams, response, $, $unparsedStreams, i, stream, $streamObj, hltvPage;
                return _regenerator2.default.wrap(function _callee3$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                streams = [];
                                _context4.next = 3;
                                return (0, _isomorphicFetch2.default)(HLTV_URL).then(function (res) {
                                    return res.text();
                                });

                            case 3:
                                response = _context4.sent;
                                $ = _cheerio2.default.load(response);
                                $unparsedStreams = $('a.col-box.streamer.a-reset');
                                i = 0;

                            case 7:
                                if (!(i < $unparsedStreams.length)) {
                                    _context4.next = 24;
                                    break;
                                }

                                stream = {};
                                $streamObj = $($unparsedStreams[i]);


                                stream.name = $streamObj.attr('title');
                                stream.viewers = parseInt($streamObj.clone().children().remove().end().text().replace(/[()]/g, ''));
                                stream.category = $($streamObj.find('img')[0]).attr('title');
                                stream.country = $($streamObj.find('img')[1]).attr('title');
                                stream.hltvLink = HLTV_URL + $streamObj.attr('href');

                                if (!loadLinks) {
                                    _context4.next = 20;
                                    break;
                                }

                                _context4.next = 18;
                                return (0, _isomorphicFetch2.default)(stream.hltvLink).then(function (res) {
                                    return res.text();
                                });

                            case 18:
                                hltvPage = _context4.sent;


                                stream.realLink = _cheerio2.default.load(hltvPage)('iframe').attr('src');

                            case 20:

                                streams.push((0, _extends3.default)({}, stream));

                            case 21:
                                i++;
                                _context4.next = 7;
                                break;

                            case 24:
                                return _context4.abrupt('return', streams);

                            case 25:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getStreams() {
                return _ref4.apply(this, arguments);
            }

            return getStreams;
        }()
    }, {
        key: 'getMatch',
        value: function () {
            var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
                var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                    id = _ref7.id;

                var match, response, $, $teams, $eventInfo, $mapFormatBox, $maps, $mapResults, $highlights, $streams, $players, $headtohead, teams, $team1, $team2, higlightArray, streamArray, h2h;
                return _regenerator2.default.wrap(function _callee4$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                match = {
                                    event: {},
                                    players: []
                                };
                                _context5.next = 3;
                                return (0, _isomorphicFetch2.default)(HLTV_URL + '/matches/' + id + '/-').then(function (res) {
                                    return res.text();
                                });

                            case 3:
                                response = _context5.sent;
                                $ = _cheerio2.default.load(response);
                                $teams = $('.teamsBox');
                                $eventInfo = $('.timeAndEvent');
                                $mapFormatBox = $('.veto-box');
                                $maps = $('.map-name-holder');
                                $mapResults = $('.results');
                                $highlights = $('.highlights');
                                $streams = $('.streams');
                                $players = $('.player');
                                $headtohead = $('.head-to-head');
                                teams = [];

                                $teams.find('.team').each(function (index) {
                                    teams.push($(this));
                                });
                                $team1 = teams[0];
                                $team2 = teams[1];
                                higlightArray = [];
                                streamArray = [];

                                if ($team1 != undefined && $team2 != undefined) {
                                    match.team1 = $team1.find('.logo').attr('title');
                                    match.team2 = $team2.find('.logo').attr('title');
                                    match.team1Id = this._getTeamIdByLogo($team1.find('.logo'));
                                    match.team2Id = this._getTeamIdByLogo($team2.find('.logo'));
                                }
                                match.date = $eventInfo.find('.date').text();
                                match.unixtime = $eventInfo.find('.date').attr('data-unix');

                                match.event.name = $eventInfo.find('.text-ellipsis').text();
                                match.event.link = HLTV_URL + $eventInfo.find('a').attr('href');
                                match.format = $mapFormatBox.text().split('\n')[1].trim();

                                match.maps = this._parseMatchPageMaps($, $maps, $mapResults);
                                $highlights.find('.highlight').each(function (index) {
                                    var highlight = {};
                                    highlight.name = $(this).text();
                                    highlight.link = $(this).attr('data-highlight-embed');
                                    higlightArray.push(highlight);
                                });
                                match.highlights = higlightArray;

                                $streams.find('.stream-box').each(function (index) {
                                    var stream = {};
                                    stream.name = $(this).find('.flagAlign').text();
                                    stream.link = $(this).attr('data-stream-embed');
                                    streamArray.push(stream);
                                });
                                match.streams = streamArray;
                                match.players[0] = $players.slice(5, 10).map(this._parseMatchPagePlayer($)).get();
                                match.players[1] = $players.slice(15, 20).map(this._parseMatchPagePlayer($)).get();
                                match.title = this._cleanupString($eventInfo.find('.text').text());
                                if ($headtohead != undefined) {
                                    h2h = {};

                                    h2h.team1wins = $($headtohead.find('.flexbox-center .bold')[0]).text();
                                    h2h.overtimes = $($headtohead.find('.flexbox-center .bold')[1]).text();
                                    h2h.team2wins = $($headtohead.find('.flexbox-center .bold')[2]).text();
                                    match.headtohead = h2h;
                                }
                                this._restructureFullMatch(match);

                                return _context5.abrupt('return', match);

                            case 37:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function getMatch() {
                return _ref6.apply(this, arguments);
            }

            return getMatch;
        }()
    }, {
        key: 'getActiveThreads',
        value: function () {
            var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
                var threads, response, $, $threadsArray, i, $thread;
                return _regenerator2.default.wrap(function _callee5$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                threads = [];
                                _context6.next = 3;
                                return (0, _isomorphicFetch2.default)(HLTV_URL).then(function (res) {
                                    return res.text();
                                });

                            case 3:
                                response = _context6.sent;
                                $ = _cheerio2.default.load(response);
                                $threadsArray = $('.activitylist').children();


                                for (i = 0; i < $threadsArray.length; i++) {
                                    $thread = $($threadsArray[i]);

                                    threads[i] = {
                                        title: $thread.find('span').text(),
                                        link: $thread.attr('href'),
                                        replies: parseInt($thread.clone().children().remove().end().text().replace(/[()]/g, ''))
                                    };
                                }
                                return _context6.abrupt('return', threads);

                            case 8:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function getActiveThreads() {
                return _ref8.apply(this, arguments);
            }

            return getActiveThreads;
        }()
    }]);
    return HLTV;
}(ParsingTools);

exports.default = HLTV;
module.exports = exports['default'];